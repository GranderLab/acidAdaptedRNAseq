legend.position = "top",
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
) +
guides(
colour =
guide_legend(
title = "Community",
nrow = 10,
title.position = "top",
override.aes = list(size = 5)
),
edge_colour=FALSE,
edge_alpha=FALSE,
size=FALSE
)+
scale_colour_manual(values=fixedCols)+
scale_edge_color_manual(values=fixedCols)
collapsed
collapsed <- ggraph(cg, layout = 'fr') +
geom_edge_link(aes(edge_alpha = communityEdge, colour = colour), edge_width = 0.5) +
geom_node_point(aes(colour = communityName, size = communityVertex)) +
theme_void() +
theme(
legend.position = "top",
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
) +
guides(
colour =
guide_legend(
title = "Community",
nrow = 10,
title.position = "top",
override.aes = list(size = 5)
),
edge_colour=FALSE,
edge_alpha=FALSE,
size=FALSE
)+
scale_colour_manual(values=fixedCols)+
scale_edge_color_manual(values=fixedCols)
collapsed
collapsed <- ggraph(cg, layout = 'fr') +
geom_edge_link(aes(edge_alpha = communityEdge, colour = colour), edge_width = 0.5) +
geom_node_point(aes(colour = community, size = communityVertex)) +
theme_void() +
theme(
legend.position = "top",
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
) +
guides(
colour =
guide_legend(
title = "Community",
nrow = 10,
title.position = "top",
override.aes = list(size = 5)
),
edge_colour=FALSE,
edge_alpha=FALSE,
size=FALSE
)+
scale_colour_manual(values=fixedCols)+
scale_edge_color_manual(values=fixedCols)
collapsed
cg <- addAttributes2(cg, comSummary)
collapsed <- ggraph(cg, layout = 'fr') +
geom_edge_link(aes(edge_alpha = communityEdge, colour = colour), edge_width = 0.5) +
geom_node_point(aes(colour = community, size = communityVertex)) +
theme_void() +
theme(
legend.position = "top",
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
) +
guides(
colour =
guide_legend(
title = "Community",
nrow = 10,
title.position = "top",
override.aes = list(size = 5)
),
edge_colour=FALSE,
edge_alpha=FALSE,
size=FALSE
)+
scale_colour_manual(values=fixedCols)+
scale_edge_color_manual(values=fixedCols)
collapsed
V(cg)$communityVertex
devtools::install()
cg <- addAttributes2(cg, comSummary)
collapsed <- ggraph(cg, layout = 'fr') +
geom_edge_link(aes(edge_alpha = communityEdge, colour = colour), edge_width = 0.5) +
geom_node_point(aes(colour = community, size = communityVertex)) +
theme_void() +
theme(
legend.position = "top",
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
) +
guides(
colour =
guide_legend(
title = "Community",
nrow = 10,
title.position = "top",
override.aes = list(size = 5)
),
edge_colour=FALSE,
edge_alpha=FALSE,
size=FALSE
)+
scale_colour_manual(values=fixedCols)+
scale_edge_color_manual(values=fixedCols)
collapsed
getwd()
devtools::use_testthat()
sigNames <- V(g)$name[V(g)$pvalue < 0.05]
length(sigNames)
nrow(sig)
vertexToAdd <- sigNames[!sigNames %in% V(cg)$name]
length(vertexToAdd)
rm(list=ls())
source('~/Github/diverseScripts/R/examples/largeDivergingPalettes.R')
library(acidAdaptedRNAseq)
library(GO.db)
library(GOSim)
library(igraph)
library(tidyverse)
library(ggraph)
library(multipanelfigure)
library(grid)
library(gtable)
library(magrittr)
library(printr)
#load GO result and subset signignificant terms
data(topGOresult, package = "acidAdaptedRNAseq")
sig <- topGOresult[topGOresult$classicFisher < 0.05, ]
#get GO graph
g <- downloadGOgraph(sig)
#run community analysis
tmp <- collapseGraph(g)
cg <- tmp[[1]]
comSummary <- tmp[[2]]
#calculate genes per term
uCommunityNames <- unique(comSummary$communityName)
genesPerCom <- lapply(1:length(uCommunityNames), function(x) {
bool <- comSummary$communityName == uCommunityNames[x]
idsToGet <- comSummary[bool, ]$GOID
genesForIdsString <- sig[sig$GO.ID %in% idsToGet, "ID"]
genesForIdsList <- strsplit(genesForIdsString, ", ")
length(unlist(genesForIdsList))
})
names(genesPerCom) <- uCommunityNames
namedListToTibble(genesPerCom) %>%
setNames(c("communityName", "nrCommunityGenes")) %>%
inner_join(distinct(select(comSummary, communityName, communityTerm))) %>%
select(communityTerm, nrCommunityGenes, -communityName)
cgSim <- similarity(cg, mode = "all", method = "jaccard")
colnames(cgSim) <- unique(
comSummary[match(V(cg)$name, comSummary$communityID), ]$communityTerm
)
rownames(cgSim) <- unique(
comSummary[match(V(cg)$name, comSummary$communityID), ]$communityTerm
)
heatmap(1 - cgSim, margins = c(20,20))
cg <- addAttributes1(cg, comSummary)
sigNames <- V(g)$name[V(g)$pvalue < 0.05]
length(sigNames)
vertexToAdd <- sigNames[!sigNames %in% V(cg)$name]
length(vertexToAdd)
759-738
edgesToAdd <- comSummary %>%
filter(!GOID %in% communityID) %>%
select(GOID, communityID) %>%
setNames(c("from", "to"))
assignment <- edgesToAdd
assignment
edges <- assignment[!assignment$from %in% vertexToAdd, ]
edges <- assignment[!assignment$to %in% vertexToAdd, ]
. <- NULL
cg <- cg %>%
add_vertices(length(vertexToAdd), attr = list(name = vertexToAdd)) %>%
add_edges(c(
rbind(
match(edges$from, V(.)$name),
match(edges$to,   V(.)$name)
)
))
edge()
edges
cg %>%
add_vertices(length(vertexToAdd), attr = list(name = vertexToAdd))
cg %>%
add_vertices(length(vertexToAdd), attr = list(name = vertexToAdd)) %>%
add_edges(c(
rbind(
match(edges$from, V(.)$name),
match(edges$to,   V(.)$name)
)
))
c(
rbind(
match(edges$from, V(.)$name),
match(edges$to,   V(.)$name)
)
)
c(
rbind(
match(edges$from, V(cg)$name),
match(edges$to,   V(cg)$name)
)
)
nrow(assignment)
nrow(edges)
table(assignment$from %in% vertexToAdd)
edges <- assignment[!assignment$from %in% vertexToAdd, ]
edges <- edges[!edges$to %in% vertexToAdd, ]
nrow(edges)
. <- NULL
cg <- cg %>%
add_vertices(length(vertexToAdd), attr = list(name = vertexToAdd)) %>%
add_edges(c(
rbind(
match(edges$from, V(.)$name),
match(edges$to,   V(.)$name)
)
))
edges
edges <- assignment[assignment$from %in% vertexToAdd, ]
edges <- edges[edges$to %in% vertexToAdd, ]
cg %>%
add_vertices(length(vertexToAdd), attr = list(name = vertexToAdd)) %>%
add_edges(c(
rbind(
match(edges$from, V(.)$name),
match(edges$to,   V(.)$name)
)
))
cg <- cg %>%
add_vertices(length(vertexToAdd), attr = list(name = vertexToAdd)) %>%
add_edges(c(
rbind(
match(edges$from, V(.)$name),
match(edges$to,   V(.)$name)
)
))
cg <- addAttributes2(cg, comSummary)
fixedCols <- col64[c(3:8, 10:18, 20:31, 35, 37, 40, 42:47, 49:60)]
names(fixedCols) <- sort(unique(get.vertex.attribute(cg)$group))
fixedCols <- fixedCols[!is.na(fixedCols)]
collapsed <- ggraph(cg, layout = 'fr') +
geom_edge_link(aes(edge_alpha = communityEdge, colour = colour), edge_width = 0.5) +
geom_node_point(aes(colour = community, size = communityVertex)) +
theme_void() +
theme(
legend.position = "top",
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
) +
guides(
colour =
guide_legend(
title = "Community",
nrow = 10,
title.position = "top",
override.aes = list(size = 5)
),
edge_colour=FALSE,
edge_alpha=FALSE,
size=FALSE
)+
scale_colour_manual(values=fixedCols)+
scale_edge_color_manual(values=fixedCols)
collapsed
devtools::install()
source('~/Github/diverseScripts/R/examples/largeDivergingPalettes.R')
library(acidAdaptedRNAseq)
library(GO.db)
library(GOSim)
library(igraph)
library(tidyverse)
library(ggraph)
library(multipanelfigure)
library(grid)
library(gtable)
library(magrittr)
library(printr)
#load GO result and subset signignificant terms
data(topGOresult, package = "acidAdaptedRNAseq")
sig <- topGOresult[topGOresult$classicFisher < 0.05, ]
#get GO graph
g <- downloadGOgraph(sig)
#run community analysis
tmp <- collapseGraph(g)
cg <- tmp[[1]]
comSummary <- tmp[[2]]
#calculate genes per term
uCommunityNames <- unique(comSummary$communityName)
genesPerCom <- lapply(1:length(uCommunityNames), function(x) {
bool <- comSummary$communityName == uCommunityNames[x]
idsToGet <- comSummary[bool, ]$GOID
genesForIdsString <- sig[sig$GO.ID %in% idsToGet, "ID"]
genesForIdsList <- strsplit(genesForIdsString, ", ")
length(unlist(genesForIdsList))
})
names(genesPerCom) <- uCommunityNames
namedListToTibble(genesPerCom) %>%
setNames(c("communityName", "nrCommunityGenes")) %>%
inner_join(distinct(select(comSummary, communityName, communityTerm))) %>%
select(communityTerm, nrCommunityGenes, -communityName)
cgSim <- similarity(cg, mode = "all", method = "jaccard")
colnames(cgSim) <- unique(
comSummary[match(V(cg)$name, comSummary$communityID), ]$communityTerm
)
rownames(cgSim) <- unique(
comSummary[match(V(cg)$name, comSummary$communityID), ]$communityTerm
)
heatmap(1 - cgSim, margins = c(20,20))
cg <- addAttributes1(cg, comSummary)
edgesToAdd <- comSummary %>%
filter(!GOID %in% communityID) %>%
select(GOID, communityID) %>%
setNames(c("from", "to"))
cg <- addBackVertexAndEdges(g, cg, edgesToAdd)
#add attributes
cg <- addAttributes2(cg, comSummary)
fixedCols <- col64[c(3:8, 10:18, 20:31, 35, 37, 40, 42:47, 49:60)]
names(fixedCols) <- sort(unique(get.vertex.attribute(cg)$group))
fixedCols <- fixedCols[!is.na(fixedCols)]
collapsed <- ggraph(cg, layout = 'fr') +
geom_edge_link(aes(edge_alpha = communityEdge, colour = colour), edge_width = 0.5) +
geom_node_point(aes(colour = community, size = communityVertex)) +
theme_void() +
theme(
legend.position = "top",
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
) +
guides(
colour =
guide_legend(
title = "Community",
nrow = 10,
title.position = "top",
override.aes = list(size = 5)
),
edge_colour=FALSE,
edge_alpha=FALSE,
size=FALSE
)+
scale_colour_manual(values=fixedCols)+
scale_edge_color_manual(values=fixedCols)
collapsed
length(V(cg))
nrow(sig)
assignment <- edgesToAdd
sigNames <- V(g)$name[V(g)$pvalue < 0.05]
#find significant terms that are not community terms
vertexToAdd <- sigNames[!sigNames %in% V(cg)$name]
edges <- assignment
cg %>%
add_vertices(
length(vertexToAdd),
attr = list(name = vertexToAdd)
) %>%
add_edges(c(
rbind(
match(edges$from, V(.)$name),
match(edges$to,   V(.)$name)
)
))
head(sig)
head(sig[,1:6])
comSummary <- tmp[[2]] %>%
left_join(select(sig, GO.ID, classicFisher), by=c("GOID" = "GO.ID"))
comSummary
table(is.na(comSummary$classicFisher))
devtools::install()
rm(list=ls())
data(topGOresult, package = "acidAdaptedRNAseq")
sig <- topGOresult[topGOresult$classicFisher < 0.05, ]
#get GO graph
g <- downloadGOgraph(sig$GO.ID)
#run community analysis
tmp <- collapseGraph(g)
cg <- tmp[[1]]
comSummary <- tmp[[2]] %>%
left_join(select(sig, GO.ID, classicFisher), by=c("GOID" = "GO.ID"))
uCommunityNames <- unique(comSummary$communityName)
genesPerCom <- lapply(1:length(uCommunityNames), function(x) {
bool <- comSummary$communityName == uCommunityNames[x]
idsToGet <- comSummary[bool, ]$GOID
genesForIdsString <- sig[sig$GO.ID %in% idsToGet, "ID"]
genesForIdsList <- strsplit(genesForIdsString, ", ")
length(unlist(genesForIdsList))
})
names(genesPerCom) <- uCommunityNames
namedListToTibble(genesPerCom) %>%
setNames(c("communityName", "nrCommunityGenes")) %>%
inner_join(distinct(select(comSummary, communityName, communityTerm))) %>%
select(communityTerm, nrCommunityGenes, -communityName)
cg <- addAttributes1(cg, comSummary)
edgesToAdd <- comSummary %>%
filter(!GOID %in% communityID) %>%
filter(classicFisher < 0.05) %>%
select(GOID, communityID) %>%
setNames(c("from", "to"))
edgesToAddd
edgesToAdd
toAdd <- comSummary %>%
filter(!GOID %in% communityID) %>%
filter(classicFisher < 0.05) %>%
select(GOID, communityID) %>%
setNames(c("from", "to"))
assignment <- toAdd
cg %>%
add_vertices(
nrow(assignment),
attr = list(name = pull(assignment, from))
) %>%
add_edges(c(
rbind(
match(pull(assignment, from), V(.)$name),
match(pull(assignment, to),   V(.)$name)
)
))
cg <- cg %>%
add_vertices(
nrow(assignment),
attr = list(name = pull(assignment, from))
) %>%
add_edges(c(
rbind(
match(pull(assignment, from), V(.)$name),
match(pull(assignment, to),   V(.)$name)
)
))
cg <- addAttributes2(cg, comSummary)
fixedCols <- col64[c(3:8, 10:18, 20:31, 35, 37, 40, 42:47, 49:60)]
names(fixedCols) <- sort(unique(get.vertex.attribute(cg)$group))
fixedCols <- fixedCols[!is.na(fixedCols)]
collapsed <- ggraph(cg, layout = 'fr') +
geom_edge_link(aes(edge_alpha = communityEdge, colour = colour), edge_width = 0.5) +
geom_node_point(aes(colour = community, size = communityVertex)) +
theme_void() +
theme(
legend.position = "top",
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
) +
guides(
colour =
guide_legend(
title = "Community",
nrow = 10,
title.position = "top",
override.aes = list(size = 5)
),
edge_colour=FALSE,
edge_alpha=FALSE,
size=FALSE
)+
scale_colour_manual(values=fixedCols)+
scale_edge_color_manual(values=fixedCols)
collapsed
source('~/Github/diverseScripts/R/examples/largeDivergingPalettes.R')
fixedCols <- col64[c(3:8, 10:18, 20:31, 35, 37, 40, 42:47, 49:60)]
fixedCols <- col64[c(3:8, 10:18, 20:31, 35, 37, 40, 42:47, 49:60)]
names(fixedCols) <- sort(unique(get.vertex.attribute(cg)$group))
fixedCols <- fixedCols[!is.na(fixedCols)]
collapsed <- ggraph(cg, layout = 'fr') +
geom_edge_link(aes(edge_alpha = communityEdge, colour = colour), edge_width = 0.5) +
geom_node_point(aes(colour = community, size = communityVertex)) +
theme_void() +
theme(
legend.position = "top",
legend.text = element_text(size = 12),
legend.title = element_text(size = 16)
) +
guides(
colour =
guide_legend(
title = "Community",
nrow = 10,
title.position = "top",
override.aes = list(size = 5)
),
edge_colour=FALSE,
edge_alpha=FALSE,
size=FALSE
)+
scale_colour_manual(values=fixedCols)+
scale_edge_color_manual(values=fixedCols)
collapsed
names(fixedCols) <- sort(unique(get.vertex.attribute(cg)$community))
fixedCols <- fixedCols[!is.na(fixedCols)]
devtools::install()
plotCollapsedGraph(cg)
devtools::install()
plotCollapsedGraph(cg)
devtools::install()
plotCollapsedGraph(cg)
help(ggplot_gtable)
help(ggplot_build)
devtools::document()
devtools::install()
devtools::install()
